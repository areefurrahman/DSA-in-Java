// Node class representing each element of the list
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Singly Linked List class
class SinglyLinkedList {
    private Node head;

    // Add node at the end
    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    // Add node at the beginning
    public void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Insert at a specific position
    public void insertAt(int index, int data) {
        if (index == 0) {
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);
        Node temp = head;
        for (int i = 0; i < index - 1 && temp != null; i++) {
            temp = temp.next;
        }
        if (temp == null) return;
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // Delete first node
    public void deleteFirst() {
        if (head != null) {
            head = head.next;
        }
    }

    // Delete last node
    public void deleteLast() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // Delete node at a specific position
    public void deleteAt(int index) {
        if (index == 0) {
            deleteFirst();
            return;
        }
        Node temp = head;
        for (int i = 0; i < index - 1 && temp.next != null; i++) {
            temp = temp.next;
        }
        if (temp.next == null) return;
        temp.next = temp.next.next;
    }

    // Search for a key in the list
    public boolean search(int key) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == key) return true;
            temp = temp.next;
        }
        return false;
    }

    // Reverse linked list iteratively
    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }

    // Find middle node
    public Node findMiddle() {
        if (head == null) return null;
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Detect loop using Floydâ€™s Cycle Detection Algorithm
    public boolean detectLoop() {
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) return true;
        }
        return false;
    }

    // Print linked list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

// Main class to test the linked list
public class Main {
    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();

        list.add(10);
        list.add(20);
        list.add(30);
        list.addFirst(5);
        list.insertAt(2, 15);

        System.out.println("Original List:");
        list.printList(); // Output: 5 -> 10 -> 15 -> 20 -> 30 -> null

        list.deleteAt(2);
        System.out.println("After Deleting at index 2:");
        list.printList(); // Output: 5 -> 10 -> 20 -> 30 -> null

        System.out.println("Is 20 in the list? " + list.search(20)); // true
        System.out.println("Middle Element: " + list.findMiddle().data); // 10

        list.reverse();
        System.out.println("Reversed List:");
        list.printList(); // Output: 30 -> 20 -> 10 -> 5 -> null
    }
}

/*
Operation	Time Complexity
Add (at end)		O(n)
Add (at beginning)	O(1)
Insert at index		O(n)
Delete (first)		O(1)
Delete (last)		O(n)
Delete at index		O(n)
Search			O(n)
Reverse			O(n)
Find middle		O(n)
Detect loop		O(n)
*/