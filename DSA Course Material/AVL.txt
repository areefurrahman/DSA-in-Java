class AVLNode {
    String key;
    int height;
    AVLNode left, right;

    AVLNode(String d) {
        key = d;
        height = 1;
    }
}

public class AVLTree {
    AVLNode root;

    //Get height of node
    int height(AVLNode N) {
        return (N == null) ? 0 : N.height;
    }

    //Get balance factor
    int getBalance(AVLNode N) {
        return (N == null) ? 0 : height(N.left) - height(N.right);
    }

    //Right rotation
    AVLNode rightRotate(AVLNode y) {
        AVLNode x = y.left;
        AVLNode T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;

        return x;
    }

    //Left rotation
    AVLNode leftRotate(AVLNode x) {
        AVLNode y = x.right;
        AVLNode T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;

        return y;
    }

    //AVL Insert with balancing
    AVLNode insert(AVLNode node, String key) {
        if (node == null)
            return new AVLNode(key);

        if (key.compareTo(node.key) < 0)
            node.left = insert(node.left, key);
        else if (key.compareTo(node.key) > 0)
            node.right = insert(node.right, key);
        else
            return node; // Duplicate not allowed

        // Update height
        node.height = 1 + Math.max(height(node.left), height(node.right));

        // Get balance factor
        int balance = getBalance(node);

        //Perform rotations

        // Left Left Case
        if (balance > 1 && key.compareTo(node.left.key) < 0)
            return rightRotate(node);

        // Right Right Case
        if (balance < -1 && key.compareTo(node.right.key) > 0)
            return leftRotate(node);

        // Left Right Case
        if (balance > 1 && key.compareTo(node.left.key) > 0) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        // Right Left Case
        if (balance < -1 && key.compareTo(node.right.key) < 0) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    //In-order traversal (Alphabetical order)
    void inOrderTraversal(AVLNode node) {
        if (node != null) {
            inOrderTraversal(node.left);
            System.out.print(node.key + " → ");
            inOrderTraversal(node.right);
        }
    }

    // ⬇️ Wrapper method
    void addStudent(String name) {
        root = insert(root, name);
    }

    void displayStudents() {
        System.out.println("Students in alphabetical order:");
        inOrderTraversal(root);
        System.out.println("null");
    }

    //To be completed by students
    void deleteStudent(String name) {
        // TODO: Implement delete method with rebalancing
    }

    boolean findStudent(String name) {
        // TODO: Implement search method
        return false;
    }

    //Main method to test
    public static void main(String[] args) {
        AVLTree archive = new AVLTree();

        archive.addStudent("Mango");
        archive.addStudent("Apple");
        archive.addStudent("Banana");
        archive.addStudent("Peach");
        archive.addStudent("Orange");

        archive.displayStudents();

        // ❌ Uncomment once students complete these
        // System.out.println("Found Mango? " + archive.findStudent("Mango"));
        // archive.deleteStudent("Banana");
        // archive.displayStudents();
    }
}
